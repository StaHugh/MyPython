日志
---------------------------------
级别				何时使用
DEBUG			详细信息，典型地调试问题时会感兴趣。
INFO			证明事情按预期工作。
WARNING			某些没有预料到的事件的提示，或者在将来可能会出现的问题提示。
				例如：磁盘空间不足。但是软件还是会照常运行。
ERROR			由于更严重的问题，软件已不能执行一些功能了。
CRITICAL		严重错误，表明软件已不能继续运行了

默认WARNING级别及以上才显示。如果你希望在命令行选项设置日志级别，像这样：
--log=INFO
并且想把参数的值传递给--log，在不同的loglevel, 你可以这样使用：
getattr(logging, loglevel.upper())

调用basicConfig()应该是在调用debug(), info()以前。因为它被设计为一次性的简单的配置设施，只有最先调用它才有用：在其它调用之后再调用它本质上来说不起作用。


logging.basicConfig函数各参数:
filename: 指定日志文件名
filemode: 和file函数意义相同，指定日志文件的打开模式，'w'或'a'
format: 指定输出的格式和内容，format可以输出很多有用信息，如上例所示:
 %(levelno)s: 打印日志级别的数值
 %(levelname)s: 打印日志级别名称
 %(pathname)s: 打印当前执行程序的路径，其实就是sys.argv[0]
 %(filename)s: 打印当前执行程序名
 %(funcName)s: 打印日志的当前函数
 %(lineno)d: 打印日志的当前行号
 %(asctime)s: 打印日志的时间
 %(thread)d: 打印线程ID
 %(threadName)s: 打印线程名称
 %(process)d: 打印进程ID
 %(message)s: 打印日志信息
datefmt: 指定时间格式，同time.strftime()
level: 设置日志级别，默认为logging.WARNING
stream: 指定将日志的输出流，可以指定输出到sys.stderr,sys.stdout或者文件，默认输出到sys.stderr，当stream和filename同时指定时，stream被忽略